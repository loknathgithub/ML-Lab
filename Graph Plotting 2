#Code 1:
import numpy as np 
import matplotlib.pyplot as plt 
from scipy.spatial import Delaunay 
# A 2D array of points 
points = np.array([[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]) 
# Perform Delaunay triangulation 
tri = Delaunay(points) 
# Visualize the triangulation 
plt.triplot(points[:,0], points[:,1]) 
plt.plot(points[:,0], points[:,1], 'o') 
plt.show()



#Code 2:
import numpy as np 
import matplotlib.pyplot as plt 
from scipy.spatial import Delaunay 
# A 2D array of points 
points = np.array([[0, 0], [0, 1], 
				[0, 2], [1, 0], [1, 1], 
				[1, 2], [2, 0], [2, 1], 
				[2, 2], [3, 0], [3, 1], 
				[3, 2], [4, 0], [4, 1], 
				[4, 2]]) 
# Perform Delaunay triangulation 
tri = Delaunay(points) 
# Visualize the triangulation 
plt.triplot(points[:,0], points[:,1], tri.simplices.copy()) 
plt.plot(points[:,0], points[:,1], 'o') 
plt.show()




#Q-2:	 Plot the Scatter Plot of data points of a single dataset.

import matplotlib.pyplot as plt 
x =[5, 7, 8, 7, 2, 17, 2, 9,4, 11, 12, 9, 6] 
y =[99, 86, 87, 88, 100, 86,103, 87, 94, 78, 77, 85, 86] 
plt.scatter(x, y, c ="blue") 
# To show the plot 
plt.show()



#Q-3:	Plot the Scatter Plot on multiple datasets.

import matplotlib.pyplot as plt 
# dataset-1 
x1 = [89, 43, 36, 36, 95, 10, 66, 34, 38, 20] 
y1 = [21, 46, 3, 35, 67, 95, 53, 72, 58, 10] 
# dataset2 
x2 = [26, 29, 48, 64, 6, 5, 36, 66, 72, 40] 
y2 = [26, 34, 90, 33, 38, 20, 56, 2, 47, 15]
#plt.scatter(x1, y1, c ="pink",linewidths = 2,marker ="s",edgecolor ="green",s = 50) 
plt.scatter(x1, y1, c ="pink") 
#plt.scatter(x2, y2, c ="yellow",linewidths = 2,marker ="^",edgecolor ="red",s = 200) 
plt.scatter(x2, y2, c ="yellow") 
plt.xlabel("X-axis") 
plt.ylabel("Y-axis") 
plt.show()




# Q-4:	Perform Scatter Plot on iris dataset.

# Import libraries 
import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt 
import seaborn as sb 
ir = pd.read_csv("C:/Users/Deep/Desktop/iris.csv") 
# plotting a scatterplot using seaborn 
sb.set_style('whitegrid') 
sb.scatterplot(data=ir, x='SepalLengthCm', y='SepalWidthCm', hue='Species') 
#sb.scatterplot(data=ir, x='SepalLengthCm', y='SepalWidthCm') 
plt.plot()



#Q-5:	Save the figure generated in Q-3 in a pdf file.

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt 
import seaborn as sb 
ir = pd.read_csv("C:/Users/Deep/Desktop/iris.csv") 
# plotting a scatterplot using seaborn 
sb.set_style('whitegrid') 
sb.scatterplot(data=ir, x='SepalLengthCm', y='SepalWidthCm', hue='Species') 
#sb.scatterplot(data=ir, x='SepalLengthCm', y='SepalWidthCm') 
plt.plot() 
plt.savefig("C:/Users/Deep/Desktop/myImagePDF1.pdf", format="pdf", bbox_inches="tight")




#Q-6:	Generate 10 data points. Plot scatter plot on the points and save the generated figure in a pdf file.

import pandas as pd 
from matplotlib import pyplot as plt 
d = {'Column 1': [i for i in range(10)], 'Column 2': [i * i for i in range(10)]} 
df = pd.DataFrame(d) 
print(df) 
df.plot(style=['o', 'rx']) 
#df.plot(style=['o']) 
plt.savefig("C:/Users/Deep/Desktop/myImagePDF2.pdf", format="pdf", bbox_inches="tight") 
plt.show()




# Q-7:	Write a python code to show the use of Marker and styles in charts.

#Code 1: 
#use of marker 

import matplotlib.pyplot as plt 
#import seaborn as sb 
x=[1,2,6] 
y=[4,5,6] 
#plt.plot(x,y,marker=",")#pixel 
#plt.plot(x,y,marker="*")#star 
#plt.plot(x,y,marker="o")#circle 
#plt.plot(x,y,marker=".")#point 
#plt.plot(x,y,marker="s")#Square 
#plt.plot(x,y,marker="D")#Diamond 
#plt.plot(x,y,marker="p")#Pentagon 
#plt.plot(x,y,marker="H")#Hexagon 
#plt.plot(x,y,marker="v")#Triangle Down 
#plt.plot(x,y,marker="^")#Triangle up 
#plt.plot(x,y,marker=">")#Triangle Right 
plt.plot(x,y,marker="<")#Triangle Left 
plt.show()




#Code 2: 
    
#use of marker size 
#Marker Size 

import matplotlib.pyplot as plt 
x=[1,2,6] 
y=[4,5,6] 
plt.plot(x,y,marker="o",ms=10)#circle




#Code 3: 
    
#use of Line Reference 
#Line Reference 

import matplotlib.pyplot as plt 
x=[1,2,6] 
y=[4,5,6] 
#plt.plot(x,y,"o:r")# : for dotted line 
#plt.plot(x,y,"o:b")#: for dotted line 
#plt.plot(x,y,"o-b")#: for solid line 
#plt.plot(x,y,"o--b")#: for dashed line 
plt.plot(x,y,"o-.b")#: for Dashed/dotted line
