pip install tensorflow[]



#Import the Library

import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split




#Import the Dataset

dataset = pd.read_csv('C:/Users/DEEP SUMAN/Desktop/Lab Prg Ready/Churn-Modelling.csv')
X = dataset.iloc[ : ,3 :-1].values
Y = dataset.iloc[ : , -1].values
print(X)
print(Y)




#Encoding Categorical Data

#Level Encoding the “Gender” Column

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
X[ : , 2] = le.fit_transform(X[ : , 2])
print(X)




#On-Hot Encoding the “Geography” column

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

ct = ColumnTransformer(transformers = [('encoder', OneHotEncoder(), [1])], remainder = 'passthrough')
X = np.array(ct.fit_transform(X))
print(X)






#Use Sklearn to split user data into a training set and a testing set
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3, random_state = 0)
#Feature Scaling
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)


#Initializing the ANN
ann = tf.keras.models.Sequential()
#Adding the Input layer and first hidden layer
ann.add(tf.keras.layers.Dense(units = 6, activation = 'relu'))

#Adding the second Hidden Layer
ann.add(tf.keras.layers.Dense(units = 6, activation = 'relu'))


#Adding the Output Layer
ann.add(tf.keras.layers.Dense(units = 1, activation = 'sigmoid'))



#Training the ANN (Training + Compilation)
#Compiling the ANN
ann.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
#Training the ANN on the Training Set
ann.fit(X_train, Y_train, batch_size = 32, epochs = 100)




#Making the predictions and Evaluating the Model

#Use the ANN model to predict if the customer with the following information will leave the bank:
#Geography: France
#Credit Score: 600
#Gender: Male
#Age: 40 Years old
#Tenure: 3 years
#Balance: 60000
#Number of Products: 2
#Does this customer have a credit card? : Yes
#Is this Customer an Active Member? : Yes
#Estimated Salary: 50000
#So, should we say goodbye to that customer?

#So, this ANN model predicts that this customer stays in the bank.

print(ann.predict(sc.transform([[1, 0, 0, 600, 1, 40, 3, 60000, 2, 1, 1, 50000]] )) > 0.5)



#Predicting the Test Set Results

y_pred = ann.predict(X_test)
y_pred = (y_pred > 0.5)
print(np.concatenate((y_pred.reshape(len(y_pred), 1), Y_test.reshape(len(Y_test), 1)), 1))




#Making the Confusion Matrix
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(Y_test, y_pred)
print(cm)
accuracy_score(Y_test, y_pred)
